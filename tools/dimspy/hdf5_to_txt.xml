<tool id="dimspy_hdf5_to_txt" name="Convert DIMSpy-based HDF5 to tsv" version="1.0.0">
    <description></description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code">
    <![CDATA[
        #if $input.object_type == "peak_lists"
            dimspy hdf5-pls-to-txt
            --input '$input.hdf5_file_in'
            --output .
            --delimiter $delimiter
        #elif $input.object_type == "peak_matrix"
            #if $input.matrix_format == "standard" or $input.matrix_format == "standard_comprehensive"
                dimspy hdf5-pm-to-txt
                --input '$input.hdf5_file_in'
                --output '$matrix_file_out'
                --delimiter $delimiter
                --attribute_name $input.matrix_attr
                --representation-samples $input.representation_samples
            #end if
            #if $input.matrix_format == "standard_comprehensive"
                &&
            #end if
            #if $input.matrix_format == "comprehensive" or $input.matrix_format == "standard_comprehensive"
                dimspy hdf5-pm-to-txt
                --input '$input.hdf5_file_in'
                --output '$matrix_comprehensive_file_out'
                --delimiter $delimiter
                --comprehensive
                --attribute_name '$input.matrix_attr'
                --representation-samples $input.representation_samples
            #end if
        #end if
    ]]>
    </command>
    <inputs>
        <param name="delimiter" type="hidden" value="tab" argument="--delimiter"/>
        <conditional name="input">
            <param name="object_type" type="select" label="Content HDF5 file" help="" argument="">
                <option value="peak_matrix" selected="true">Peak Intensity Matrix</option>
                <option value="peak_lists">Peak list(s)</option>
            </param>
            <when value="peak_lists">
                <param name="hdf5_file_in" type="data" format="h5" label="Peaklist(s) (HDF5 file)" help="" argument="--input"/>
            </when>
            <when value="peak_matrix">
                <param name="hdf5_file_in" type="data" format="h5" label="Peak intensity matrix (HDF5 file)" help="" argument="--input"/>
                <param name="matrix_format" type="select" label="Select format(s) tsv formatted peak instensity matrix" >
                    <option value="standard" selected="true">Standard Peak Matrix (i.e. m/z and intensity).</option>
                    <option value="comprehensive">Comprehensive Peak Matrix (e.g. m/z and intensity, rsd, missing values).</option>
                    <option value="standard_comprehensive">Standard and comprehensive</option>
                </param>
                <param name="representation_samples" type="select" label="Should the rows or columns represent the samples?">
                    <option value="rows" selected="true">Rows</option>
                    <option value="columns">Columns</option>
                </param>
                <param name="matrix_attr" type="select" label="The Peak Matrix should contain ... values">
                    <option value="intensity" selected="true">Intensity</option>
                    <option value="mz">m/z</option>
                    <option value="snr">Signal-to-noise ratio (SNR)</option>
                </param>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <collection name="peaklists_txt" type="list" label="${tool.name} on ${on_string}: Peaklists">
            <filter>input["object_type"] == "peak_lists"</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.txt" format="tsv" directory="." visible="false" />
        </collection>
        <data name="matrix_file_out" format="tsv" label="${tool.name} on ${on_string}: Peak Matrix">
            <filter>input["object_type"] == "peak_matrix" and (input["matrix_format"] == "standard" or input["matrix_format"] == "standard_comprehensive")</filter>
        </data>
        <data name="matrix_comprehensive_file_out" format="tsv" label="${tool.name} on ${on_string}: Peak Matrix (comprehensive)" >
            <filter>input["object_type"] == "peak_matrix" and (input["matrix_format"] == "comprehensive" or input["matrix_format"] == "standard_comprehensive")</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="input|object_type" value="peak_lists"/>
            <param name="input|hdf5_file_in" value="pls.h5" ftype="h5"/>
            <output_collection name="peaklists_txt" type="list">
                <element name="batch04_QC17_rep01_262" file="batch04_QC17_rep01_262.txt" ftype="tsv"/>
                <element name="batch04_QC17_rep02_263" file="batch04_QC17_rep02_263.txt" ftype="tsv"/>
                <element name="batch04_QC17_rep03_264" file="batch04_QC17_rep03_264.txt" ftype="tsv"/>
            </output_collection>
        </test>
        <test>
            <param name="input|object_type" value="peak_matrix"/>
            <param name="input|hdf5_file_in" value="pm_as_bf_sf.h5" ftype="h5"/>
            <param name="input|matrix_format" value="comprehensive"/>
            <param name="input|representation_samples" value="columns"/>
            <param name="input|matrix_attr" value="intensity"/>
            <output name="matrix_comprehensive_file_out" file="peak_matrix_hdf5_to_txt_intensity.txt" ftype="tsv" compare="sim_size"/>
        </test>
        <test>
            <param name="input|object_type" value="peak_matrix"/>
            <param name="input|hdf5_file_in" value="pm_as_bf_sf.h5" ftype="h5"/>
            <param name="input|matrix_format" value="standard"/>
            <param name="input|representation_samples" value="rows"/>
            <param name="input|matrix_attr" value="mz"/>
            <output name="matrix_file_out" file="peak_matrix_hdf5_to_txt_mz.txt" ftype="tsv" compare="sim_size"/>
        </test>
        <test>
            <param name="input|object_type" value="peak_matrix"/>
            <param name="input|hdf5_file_in" value="pm_as_bf_sf.h5" ftype="h5"/>
            <param name="input|matrix_format" value="standard_comprehensive"/>
            <param name="input|representation_samples" value="rows"/>
            <param name="input|matrix_attr" value="snr"/>
            <output name="matrix_file_out" file="peak_matrix_hdf5_to_txt_snr.txt" ftype="tsv" compare="sim_size"/>
            <output name="matrix_comprehensive_file_out" file="peak_matrix_hdf5_to_txt_comprehensive_snr.txt" ftype="tsv" compare="sim_size"/>
        </test>
    </tests>
    <help>
--------------------------------
Convert DIMSpy-based HDF5 to tsv
--------------------------------

..

----------------------------------

Description
-----------

|

This tool is used to convert a .hdf5 file, containing either peaklist(s) or a peak intensity matrix, to user-friendly .tsv file(s).

|

----------------------------------

Parameters
----------

|

	**Contents of hdf5 file** (REQUIRED; default = **peak intensity matrix**) - selection menu in which the user defines whether the input .hdf5 file contains:
	
		**a peak intensity matrix**
		
		**peaklist(s)**
		
	|

	**Peak intensity matrix or peaklists (HDF5 file)** (REQUIRED) - selection menu in which the user chooses the .hdf5 file (from the active Galaxy history) to be converted to .tsv formatted output(s). 

	|

	**Select format(s) tsv formatted peak intensity matrix** (REQUIRED; default = **Standard Peak Matrix**) - selection menu in which the user chooses from the following export options:
		 
		**Standard peak matrix** - a peak intensity matrix with samples as rows, peak mass-to-charge ratios of peaks as columns, and the recorded peak intensity values (if any) given at the intersections.

		**Comprehensive peak matrix** (e.g. m/z and intensity, rsd, missing valies) - as per standard peak matrix, but with the following additional columns:

			**m/z** - a numeric value indicating the recorded mass-to-charge ratio of a given peak in the given sample
			
			**rsd** - a numeric value indicating the percent relative standard deviation (otherwise termed the percent coefficient of variation) of a given peak across technical replicates of the given study sample
			
			**missing values** - a numeric value indicating the number of peaks for which no intensity value was recorded in the given sample.

		**Standard and Comprehensive** - both the standard peak matrix and comprehensive peak matrix (described above) are exported to the active Galaxy history.

	|

	**Should rows or columns represent the samples?** (REQUIRED; default = **rows**) - binary toggle where selection of:
	
		**rows** - puts sample information in to the rows and m/z values (for aligned mass spectral peaks) in to columns of any output peak matrix.
		
		**columns** - puts sample information in the columns and m/z values (for aligned mass spectral peaks) in to the rows of any output peak matrix.

	|

	**The peak matrix should contain intensity | m/z | SNR values** (REQUIRED) - this option defines which of the following peak metrics is recorded in the exported peak matrix:

		**Intensity** - write the absolute peak intensity to the output peak matrix
		
		**m/z** - write the mass-to-charge ratio to the output peak matrix
		
		**signal-to-noise ratio (SNR)** - write the signal-to-noise ratio to the output peak matrix

|

----------------------------------

Output file(s)
--------------

|

**Important** - the metric recorded output peak matrix/matrices is adjusted using the "The peak matrix should contain intensity | m/z | SNR values" parameter. By default, samples are presented row-wise and peak mass-to-charge ratio values are presented column-wise in each peak matrix, though this may be adjusted using the "Should rows or columns represent samples" parameter toggle. 

	**Standard output** - a peak matrix, in tab-delimited .tsv format with ".‚Äù as decimal and NA for missing values.
	
	**Comprehensive output** - the standard output (described above) is expanded to include the measured m/z of each peak in each sample, the rsd of each peak across all samples and the total number of missing values in each study sample.

|

----------------------------------------------

@github_developers_contributors@
    
    </help>
    <expand macro="citations" />
</tool>

